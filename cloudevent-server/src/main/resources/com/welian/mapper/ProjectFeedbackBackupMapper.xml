<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.welian.mapper.ProjectFeedbackBackupMapper">
    <resultMap id="BaseResultMap" type="com.welian.pojo.ProjectFeedbackBackup">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="event_record_id" jdbcType="INTEGER" property="eventRecordId"/>
        <result column="investor_id" jdbcType="INTEGER" property="investorId"/>
        <result column="state" jdbcType="INTEGER" property="state"/>
        <result column="lastest_comment" jdbcType="VARCHAR" property="lastestComment"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="modify_time" jdbcType="BIGINT" property="modifyTime"/>
        <result column="feedback_time" jdbcType="BIGINT" property="feedbackTime"/>
        <result column="order_id" jdbcType="INTEGER" property="orderId"/>
        <result column="order_time" jdbcType="BIGINT" property="orderTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, event_record_id, investor_id, state, lastest_comment, create_time, modify_time, 
    feedback_time, order_id, order_time
  </sql>
    <select id="selectByExample" parameterType="com.welian.pojo.ProjectFeedbackBackupExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from project_feedback_backup
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select 'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from project_feedback_backup
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from project_feedback_backup
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.welian.pojo.ProjectFeedbackBackupExample">
        delete from project_feedback_backup
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.welian.pojo.ProjectFeedbackBackup"
            useGeneratedKeys="true">
    insert into project_feedback_backup (event_record_id, investor_id, state, 
      lastest_comment, create_time, modify_time, 
      feedback_time, order_id, order_time
      )
    values (#{eventRecordId,jdbcType=INTEGER}, #{investorId,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, 
      #{lastestComment,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, #{modifyTime,jdbcType=BIGINT}, 
      #{feedbackTime,jdbcType=BIGINT}, #{orderId,jdbcType=INTEGER}, #{orderTime,jdbcType=BIGINT}
      )
  </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.welian.pojo.ProjectFeedbackBackup"
            useGeneratedKeys="true">
        insert into project_feedback_backup
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="eventRecordId != null">
                event_record_id,
            </if>
            <if test="investorId != null">
                investor_id,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="lastestComment != null">
                lastest_comment,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="feedbackTime != null">
                feedback_time,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="orderTime != null">
                order_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="eventRecordId != null">
                #{eventRecordId,jdbcType=INTEGER},
            </if>
            <if test="investorId != null">
                #{investorId,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="lastestComment != null">
                #{lastestComment,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="feedbackTime != null">
                #{feedbackTime,jdbcType=BIGINT},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="orderTime != null">
                #{orderTime,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.welian.pojo.ProjectFeedbackBackupExample"
            resultType="java.lang.Long">
        select count(*) from project_feedback_backup
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update project_feedback_backup
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.eventRecordId != null">
                event_record_id = #{record.eventRecordId,jdbcType=INTEGER},
            </if>
            <if test="record.investorId != null">
                investor_id = #{record.investorId,jdbcType=INTEGER},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=INTEGER},
            </if>
            <if test="record.lastestComment != null">
                lastest_comment = #{record.lastestComment,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=BIGINT},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=BIGINT},
            </if>
            <if test="record.feedbackTime != null">
                feedback_time = #{record.feedbackTime,jdbcType=BIGINT},
            </if>
            <if test="record.orderId != null">
                order_id = #{record.orderId,jdbcType=INTEGER},
            </if>
            <if test="record.orderTime != null">
                order_time = #{record.orderTime,jdbcType=BIGINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update project_feedback_backup
        set id = #{record.id,jdbcType=INTEGER},
        event_record_id = #{record.eventRecordId,jdbcType=INTEGER},
        investor_id = #{record.investorId,jdbcType=INTEGER},
        state = #{record.state,jdbcType=INTEGER},
        lastest_comment = #{record.lastestComment,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=BIGINT},
        modify_time = #{record.modifyTime,jdbcType=BIGINT},
        feedback_time = #{record.feedbackTime,jdbcType=BIGINT},
        order_id = #{record.orderId,jdbcType=INTEGER},
        order_time = #{record.orderTime,jdbcType=BIGINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.welian.pojo.ProjectFeedbackBackup">
        update project_feedback_backup
        <set>
            <if test="eventRecordId != null">
                event_record_id = #{eventRecordId,jdbcType=INTEGER},
            </if>
            <if test="investorId != null">
                investor_id = #{investorId,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
            <if test="lastestComment != null">
                lastest_comment = #{lastestComment,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="feedbackTime != null">
                feedback_time = #{feedbackTime,jdbcType=BIGINT},
            </if>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=INTEGER},
            </if>
            <if test="orderTime != null">
                order_time = #{orderTime,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.welian.pojo.ProjectFeedbackBackup">
    update project_feedback_backup
    set event_record_id = #{eventRecordId,jdbcType=INTEGER},
      investor_id = #{investorId,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      lastest_comment = #{lastestComment,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      modify_time = #{modifyTime,jdbcType=BIGINT},
      feedback_time = #{feedbackTime,jdbcType=BIGINT},
      order_id = #{orderId,jdbcType=INTEGER},
      order_time = #{orderTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <select id="getFeedbackList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        ((select * from project_feedback_backup
        where event_record_id = #{eventRecordId,jdbcType=INTEGER} and state in(1,2))
        union
        (select * from project_feedback_backup
        where event_record_id = #{eventRecordId,jdbcType=INTEGER} and state in(0,3))) p
        order by feedback_time desc ,order_time desc
        limit #{start,jdbcType=INTEGER}, #{size,jdbcType=INTEGER}
    </select>

    <select id="selectOrderIdByPage" resultType="java.lang.Integer">
        select order_id from project_feedback_backup where state in (0,1) order by id asc
        limit #{start,jdbcType=INTEGER}, #{size,jdbcType=INTEGER}
    </select>
</mapper>