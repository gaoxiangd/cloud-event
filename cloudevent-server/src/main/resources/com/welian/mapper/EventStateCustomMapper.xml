<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.welian.mapper.EventStateCustomMapper">
  <resultMap id="BaseResultMap" type="com.welian.pojo.EventStateCustom">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="event_id" jdbcType="INTEGER" property="eventId" />
    <result column="cost_type" jdbcType="TINYINT" property="costType" />
    <result column="verify_type" jdbcType="TINYINT" property="verifyType" />
    <result column="open_sign_up_list" jdbcType="TINYINT" property="openSignUpList" />
    <result column="sign_count" jdbcType="INTEGER" property="signCount" />
    <result column="joined_count" jdbcType="INTEGER" property="joinedCount" />
    <result column="auth_password" jdbcType="VARCHAR" property="authPassword" />
    <result column="group_chat_state" jdbcType="TINYINT" property="groupChatState" />
    <result column="finance_status" jdbcType="TINYINT" property="financeStatus" />
    <result column="modify_time" jdbcType="BIGINT" property="modifyTime" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="group_chat" jdbcType="VARCHAR" property="groupChat" />
    <result column="custom_number_state" jdbcType="TINYINT" property="customNumberState" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, event_id, cost_type, verify_type, open_sign_up_list, sign_count, joined_count, 
    auth_password, group_chat_state, finance_status, modify_time, create_time, group_chat, 
    custom_number_state
  </sql>
  <select id="selectByExample" parameterType="com.welian.pojo.EventStateCustomExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from event_state_custom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 'true' as QUERYID,
    <include refid="Base_Column_List" />
    from event_state_custom
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from event_state_custom
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.welian.pojo.EventStateCustomExample">
    delete from event_state_custom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.welian.pojo.EventStateCustom" useGeneratedKeys="true">
    insert into event_state_custom (event_id, cost_type, verify_type, 
      open_sign_up_list, sign_count, joined_count, 
      auth_password, group_chat_state, finance_status, 
      modify_time, create_time, group_chat, 
      custom_number_state)
    values (#{eventId,jdbcType=INTEGER}, #{costType,jdbcType=TINYINT}, #{verifyType,jdbcType=TINYINT}, 
      #{openSignUpList,jdbcType=TINYINT}, #{signCount,jdbcType=INTEGER}, #{joinedCount,jdbcType=INTEGER}, 
      #{authPassword,jdbcType=VARCHAR}, #{groupChatState,jdbcType=TINYINT}, #{financeStatus,jdbcType=TINYINT}, 
      #{modifyTime,jdbcType=BIGINT}, #{createTime,jdbcType=BIGINT}, #{groupChat,jdbcType=VARCHAR}, 
      #{customNumberState,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.welian.pojo.EventStateCustom" useGeneratedKeys="true">
    insert into event_state_custom
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="eventId != null">
        event_id,
      </if>
      <if test="costType != null">
        cost_type,
      </if>
      <if test="verifyType != null">
        verify_type,
      </if>
      <if test="openSignUpList != null">
        open_sign_up_list,
      </if>
      <if test="signCount != null">
        sign_count,
      </if>
      <if test="joinedCount != null">
        joined_count,
      </if>
      <if test="authPassword != null">
        auth_password,
      </if>
      <if test="groupChatState != null">
        group_chat_state,
      </if>
      <if test="financeStatus != null">
        finance_status,
      </if>
      <if test="modifyTime != null">
        modify_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="groupChat != null">
        group_chat,
      </if>
      <if test="customNumberState != null">
        custom_number_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="eventId != null">
        #{eventId,jdbcType=INTEGER},
      </if>
      <if test="costType != null">
        #{costType,jdbcType=TINYINT},
      </if>
      <if test="verifyType != null">
        #{verifyType,jdbcType=TINYINT},
      </if>
      <if test="openSignUpList != null">
        #{openSignUpList,jdbcType=TINYINT},
      </if>
      <if test="signCount != null">
        #{signCount,jdbcType=INTEGER},
      </if>
      <if test="joinedCount != null">
        #{joinedCount,jdbcType=INTEGER},
      </if>
      <if test="authPassword != null">
        #{authPassword,jdbcType=VARCHAR},
      </if>
      <if test="groupChatState != null">
        #{groupChatState,jdbcType=TINYINT},
      </if>
      <if test="financeStatus != null">
        #{financeStatus,jdbcType=TINYINT},
      </if>
      <if test="modifyTime != null">
        #{modifyTime,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="groupChat != null">
        #{groupChat,jdbcType=VARCHAR},
      </if>
      <if test="customNumberState != null">
        #{customNumberState,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.welian.pojo.EventStateCustomExample" resultType="java.lang.Long">
    select count(*) from event_state_custom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update event_state_custom
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.eventId != null">
        event_id = #{record.eventId,jdbcType=INTEGER},
      </if>
      <if test="record.costType != null">
        cost_type = #{record.costType,jdbcType=TINYINT},
      </if>
      <if test="record.verifyType != null">
        verify_type = #{record.verifyType,jdbcType=TINYINT},
      </if>
      <if test="record.openSignUpList != null">
        open_sign_up_list = #{record.openSignUpList,jdbcType=TINYINT},
      </if>
      <if test="record.signCount != null">
        sign_count = #{record.signCount,jdbcType=INTEGER},
      </if>
      <if test="record.joinedCount != null">
        joined_count = #{record.joinedCount,jdbcType=INTEGER},
      </if>
      <if test="record.authPassword != null">
        auth_password = #{record.authPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.groupChatState != null">
        group_chat_state = #{record.groupChatState,jdbcType=TINYINT},
      </if>
      <if test="record.financeStatus != null">
        finance_status = #{record.financeStatus,jdbcType=TINYINT},
      </if>
      <if test="record.modifyTime != null">
        modify_time = #{record.modifyTime,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.groupChat != null">
        group_chat = #{record.groupChat,jdbcType=VARCHAR},
      </if>
      <if test="record.customNumberState != null">
        custom_number_state = #{record.customNumberState,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update event_state_custom
    set id = #{record.id,jdbcType=INTEGER},
      event_id = #{record.eventId,jdbcType=INTEGER},
      cost_type = #{record.costType,jdbcType=TINYINT},
      verify_type = #{record.verifyType,jdbcType=TINYINT},
      open_sign_up_list = #{record.openSignUpList,jdbcType=TINYINT},
      sign_count = #{record.signCount,jdbcType=INTEGER},
      joined_count = #{record.joinedCount,jdbcType=INTEGER},
      auth_password = #{record.authPassword,jdbcType=VARCHAR},
      group_chat_state = #{record.groupChatState,jdbcType=TINYINT},
      finance_status = #{record.financeStatus,jdbcType=TINYINT},
      modify_time = #{record.modifyTime,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=BIGINT},
      group_chat = #{record.groupChat,jdbcType=VARCHAR},
      custom_number_state = #{record.customNumberState,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.welian.pojo.EventStateCustom">
    update event_state_custom
    <set>
      <if test="eventId != null">
        event_id = #{eventId,jdbcType=INTEGER},
      </if>
      <if test="costType != null">
        cost_type = #{costType,jdbcType=TINYINT},
      </if>
      <if test="verifyType != null">
        verify_type = #{verifyType,jdbcType=TINYINT},
      </if>
      <if test="openSignUpList != null">
        open_sign_up_list = #{openSignUpList,jdbcType=TINYINT},
      </if>
      <if test="signCount != null">
        sign_count = #{signCount,jdbcType=INTEGER},
      </if>
      <if test="joinedCount != null">
        joined_count = #{joinedCount,jdbcType=INTEGER},
      </if>
      <if test="authPassword != null">
        auth_password = #{authPassword,jdbcType=VARCHAR},
      </if>
      <if test="groupChatState != null">
        group_chat_state = #{groupChatState,jdbcType=TINYINT},
      </if>
      <if test="financeStatus != null">
        finance_status = #{financeStatus,jdbcType=TINYINT},
      </if>
      <if test="modifyTime != null">
        modify_time = #{modifyTime,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="groupChat != null">
        group_chat = #{groupChat,jdbcType=VARCHAR},
      </if>
      <if test="customNumberState != null">
        custom_number_state = #{customNumberState,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.welian.pojo.EventStateCustom">
    update event_state_custom
    set event_id = #{eventId,jdbcType=INTEGER},
      cost_type = #{costType,jdbcType=TINYINT},
      verify_type = #{verifyType,jdbcType=TINYINT},
      open_sign_up_list = #{openSignUpList,jdbcType=TINYINT},
      sign_count = #{signCount,jdbcType=INTEGER},
      joined_count = #{joinedCount,jdbcType=INTEGER},
      auth_password = #{authPassword,jdbcType=VARCHAR},
      group_chat_state = #{groupChatState,jdbcType=TINYINT},
      finance_status = #{financeStatus,jdbcType=TINYINT},
      modify_time = #{modifyTime,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=BIGINT},
      group_chat = #{groupChat,jdbcType=VARCHAR},
      custom_number_state = #{customNumberState,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateRecordCount" parameterType="map">
    update event_state_custom set joined_count = joined_count + ( #{count,jdbcType=INTEGER} )
    where event_id = #{eventId,jdbcType=INTEGER}
  </update>
</mapper>