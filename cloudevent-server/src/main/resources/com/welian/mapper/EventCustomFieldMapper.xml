<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.welian.mapper.EventCustomFieldMapper">
    <resultMap id="BaseResultMap" type="com.welian.pojo.EventCustomField">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="event_id" jdbcType="INTEGER" property="eventId"/>
        <result column="field_type" jdbcType="TINYINT" property="fieldType"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="state" jdbcType="TINYINT" property="state"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="modify_time" jdbcType="BIGINT" property="modifyTime"/>
        <result column="required" jdbcType="TINYINT" property="required"/>
        <result column="limit_count" jdbcType="INTEGER" property="limitCount"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, event_id, field_type, title, state, create_time, modify_time, required, limit_count
  </sql>
    <select id="selectByExample" parameterType="com.welian.pojo.EventCustomFieldExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from event_custom_field
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select 'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from event_custom_field
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from event_custom_field
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.welian.pojo.EventCustomFieldExample">
        delete from event_custom_field
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.welian.pojo.EventCustomField"
            useGeneratedKeys="true">
    insert into event_custom_field (event_id, field_type, title, 
      state, create_time, modify_time, 
      required, limit_count)
    values (#{eventId,jdbcType=INTEGER}, #{fieldType,jdbcType=TINYINT}, #{title,jdbcType=VARCHAR}, 
      #{state,jdbcType=TINYINT}, #{createTime,jdbcType=BIGINT}, #{modifyTime,jdbcType=BIGINT}, 
      #{required,jdbcType=TINYINT}, #{limitCount,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.welian.pojo.EventCustomField"
            useGeneratedKeys="true">
        insert into event_custom_field
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="eventId != null">
                event_id,
            </if>
            <if test="fieldType != null">
                field_type,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="required != null">
                required,
            </if>
            <if test="limitCount != null">
                limit_count,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="eventId != null">
                #{eventId,jdbcType=INTEGER},
            </if>
            <if test="fieldType != null">
                #{fieldType,jdbcType=TINYINT},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="required != null">
                #{required,jdbcType=TINYINT},
            </if>
            <if test="limitCount != null">
                #{limitCount,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.welian.pojo.EventCustomFieldExample" resultType="java.lang.Long">
        select count(*) from event_custom_field
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update event_custom_field
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.eventId != null">
                event_id = #{record.eventId,jdbcType=INTEGER},
            </if>
            <if test="record.fieldType != null">
                field_type = #{record.fieldType,jdbcType=TINYINT},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=TINYINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=BIGINT},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=BIGINT},
            </if>
            <if test="record.required != null">
                required = #{record.required,jdbcType=TINYINT},
            </if>
            <if test="record.limitCount != null">
                limit_count = #{record.limitCount,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update event_custom_field
        set id = #{record.id,jdbcType=INTEGER},
        event_id = #{record.eventId,jdbcType=INTEGER},
        field_type = #{record.fieldType,jdbcType=TINYINT},
        title = #{record.title,jdbcType=VARCHAR},
        state = #{record.state,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=BIGINT},
        modify_time = #{record.modifyTime,jdbcType=BIGINT},
        required = #{record.required,jdbcType=TINYINT},
        limit_count = #{record.limitCount,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.welian.pojo.EventCustomField">
        update event_custom_field
        <set>
            <if test="eventId != null">
                event_id = #{eventId,jdbcType=INTEGER},
            </if>
            <if test="fieldType != null">
                field_type = #{fieldType,jdbcType=TINYINT},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="required != null">
                required = #{required,jdbcType=TINYINT},
            </if>
            <if test="limitCount != null">
                limit_count = #{limitCount,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.welian.pojo.EventCustomField">
    update event_custom_field
    set event_id = #{eventId,jdbcType=INTEGER},
      field_type = #{fieldType,jdbcType=TINYINT},
      title = #{title,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=BIGINT},
      modify_time = #{modifyTime,jdbcType=BIGINT},
      required = #{required,jdbcType=TINYINT},
      limit_count = #{limitCount,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <insert id="insertByBatch" parameterType="java.util.List">
        insert into event_custom_field (event_id, field_type, title, create_time, modify_time,required,limit_count)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.eventId,jdbcType=INTEGER},
            #{item.fieldType,jdbcType=TINYINT},
            #{item.title,jdbcType=VARCHAR},
            #{item.createTime,jdbcType=BIGINT},
            #{item.modifyTime,jdbcType=BIGINT},
            #{item.required,jdbcType=TINYINT},
            #{item.limitCount,jdbcType=INTEGER})
        </foreach>
    </insert>

</mapper>